import * as fs from "fs";
import * as path from "path";
import {
  getStringContentAsync,
} from "./reusable";
import {
  RLRepoRawBaseUrl,
  RLDocsPath,
  RLnamesRawBaseIndexUrl,
  RLRepoBaseUrl, 
  RLStaticResourcePath
} from "./constants";

// Current pathname
const pathName = path.basename(__filename);

// Clear up this is auto generated file from Rust Library repository
const injectAutogeneratedMessage = (content: string, fileName: string, path: string) => {
  return (
    content +
    "\n" +
    "## Serialization-Lib Information  \nThis page was generated automatically from: [" +
    RLRepoBaseUrl +
    "](" +
    RLRepoBaseUrl +
    RLStaticResourcePath +
    "/" +
    fileName +
    ".md)."
  );
}

// String manipulations to ensure compatibility
const stringManipulation = (content: string, fileName: string) => {
  // Replace empty links
  content = content.replace(/\]\(\)/gm, "]");

  // Clear up this is auto generated file from Rust Library repository
  content = injectAutogeneratedMessage(content, fileName, pathName);

  return content;
};

// Filename manipulations to ensure compatibility
const fileNameManipulation = (fileName: string) => {
  // Modify filename for 'metadata' with 'transaction-metadata'
  fileName = fileName === "metadata" ? "transaction-metadata" : fileName;

  return fileName;
};

// In case we want a specific sidebar_position for a certain filename (otherwise alphabetically)
// In the future it will be better to get this information from the index.rst file
export const sidebarPosition = (fileName: string) => {

  if (fileName === "prerequisite-knowledge") return "sidebar_position: 2\n";
  if (fileName === "generating-keys") return "sidebar_position: 3\n";
  if (fileName === "generating-transactions") return "sidebar_position: 4\n";
  if (fileName === "transaction-metadata") return "sidebar_position: 5\n";

  return ""; // Empty string means alphabetically within the sidebar
};

// Inject Docusaurus doc tags for title and add a nice sidebar
const injectDocusaurusDocTags = (content: string, fileName: string) => {

// Remove '---' from doc to add it later
content = content.substring(0, 3) === "---" ? content.slice(3) : content;

  // Replace '-' from url in order to create a clean sidebar label
  const modifiedFileName = fileName.replace(/[-]/gm, " ");

  // Capitalize the first letter of each word
  let sidebarLabel = modifiedFileName
    .toLowerCase()
    .replace(/(^\w{1})|(\s{1}\w{1})/g, (match) => match.toUpperCase());

  // Add '---' with doc tags for Docusaurus
  content =
    "--- \nsidebar_label: " +
    sidebarLabel +
    "\ntitle: " +
    fileName +
    "\n" +
    sidebarPosition(fileName) +
    "--- " +
    "\n" +
    content;

  return content;
}

const main = async () => {
  console.log("Rust Library Content Downloading...");

  // Fetch markdown file names
  const indexWithMarkDownNames = await getStringContentAsync(
    `${RLnamesRawBaseIndexUrl}`
  );

  // Create array of markdown names to fetch raw files
  const markDownNames = indexWithMarkDownNames.match(
    /(?<=getting-started\/)(.*?)(?=[\r\n]+)/g
  );
  const rustLibraryUniqueUrls = [...new Set(markDownNames)];

  // Save rust library markdowns into docs folder
  await Promise.all(
    rustLibraryUniqueUrls.map(async (fileName) => {
      // Download markdown files
      const result = await getStringContentAsync(
        `${RLRepoRawBaseUrl}${fileName}.md`
      );

      // Remove invalid links that are empty
      const manipulatedContent = stringManipulation(result, fileName);

      // Inject Docusaurus doc tags
      const manipulatedContentWithDocTags = injectDocusaurusDocTags(manipulatedContent, fileName)

      const manipulatedFileName = fileNameManipulation(fileName);

      // Create markdown files locally with downloaded content
      fs.writeFileSync(
        `${RLDocsPath}/${manipulatedFileName}.md`,
        manipulatedContentWithDocTags
      );
      console.log(`Downloaded to ${RLDocsPath}/${fileName}.md`);
    })
  );

  console.log("Rust Library Content Downloaded");
};

main();
