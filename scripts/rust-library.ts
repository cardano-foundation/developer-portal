import * as fs from "fs";
import * as path from "path";
import {
  getStringContentAsync,
} from "./reusable";
import {
  rl_repo_raw_base_url,
  rl_docs_path,
  rl_raw_base_index_url,
  rl_repo_base_url, 
  rl_static_resource_path,
  custom_edit_url
} from "./constants";

// Current pathname
const path_name = path.basename(__filename);

// Clear up this is auto generated file from Rust Library repository
const injectAutogeneratedMessage = (content: string, file_name: string, path: string) => {
  return (
    content +
    "\n" +
    "## Serialization-Lib Information  \nThis page was generated automatically from: [" +
    rl_repo_base_url +
    "](" +
    rl_repo_base_url +
    rl_static_resource_path +
    "/" +
    file_name +
    ".md)."
  );
}

// String manipulations to ensure compatibility
const stringManipulation = (content: string, file_name: string) => {
  // Replace empty links
  content = content.replace(/\]\(\)/gm, "]");

  // Clear up this is auto generated file from Rust Library repository
  content = injectAutogeneratedMessage(content, file_name, path_name);

  return content;
};

// Filename manipulations to ensure compatibility
const fileNameManipulation = (file_ane: string) => {
  // Modify file_ane for 'metadata' with 'transaction-metadata'
  file_ane = file_ane === "metadata" ? "transaction-metadata" : file_ane;

  return file_ane;
};

// In case we want a specific sidebar_position for a certain file_name (otherwise alphabetically)
// In the future it will be better to get this information from the index.rst file
export const sidebarPosition = (file_name: string) => {

  if (file_name === "prerequisite-knowledge") return "sidebar_position: 2\n";
  if (file_name === "generating-keys") return "sidebar_position: 3\n";
  if (file_name === "generating-transactions") return "sidebar_position: 4\n";
  if (file_name === "transaction-metadata") return "sidebar_position: 5\n";

  return ""; // Empty string means alphabetically within the sidebar
};

// Inject Docusaurus doc tags for title and add a nice sidebar
const injectDocusaurusDocTags = (content: string, file_name: string) => {

// Remove '---' from doc to add it later
content = content.substring(0, 3) === "---" ? content.slice(3) : content;

  // Replace '-' from url in order to create a clean sidebar label
  const modified_file_name = file_name.replace(/[-]/gm, " ");

  // Capitalize the first letter of each word
  let sidebar_label = modified_file_name
    .toLowerCase()
    .replace(/(^\w{1})|(\s{1}\w{1})/g, (match) => match.toUpperCase());

  // Add '---' with doc tags for Docusaurus
  content =
    "--- \nsidebar_label: " +
    sidebar_label +
    custom_edit_url + 
    "\ntitle: " +
    file_name +
    "\nimage: /img/og/og-getstarted-serialization-lib.png" +
    "\n" +
    sidebarPosition(file_name) +
    "--- " +
    "\n" +
    content;

  return content;
}

const main = async () => {
  console.log("Rust Library Content Downloading...");

  // Fetch markdown file names
  const index_with_markdown_names = await getStringContentAsync(
    `${rl_raw_base_index_url}`
  );

  // Create array of markdown names to fetch raw files
  const markdown_names = index_with_markdown_names.match(
    /(?<=getting-started\/)(.*?)(?=[\r\n]+)/g
  );
  const rl_unique_urls = [...new Set(markdown_names)];

  // Save rust library markdowns into docs folder
  await Promise.all(
    rl_unique_urls.map(async (file_name) => {
      // Download markdown files
      const result = await getStringContentAsync(
        `${rl_repo_raw_base_url}${file_name}.md`
      );

      // Remove invalid links that are empty
      const manipulated_content = stringManipulation(result, file_name);

      // Inject Docusaurus doc tags
      const manipulated_content_with_doc_tags = injectDocusaurusDocTags(manipulated_content, file_name)

      const manipulated_file_name = fileNameManipulation(file_name);

      // Create markdown files locally with downloaded content
      fs.writeFileSync(
        `${rl_docs_path}/${manipulated_file_name}.md`,
        manipulated_content_with_doc_tags
      );
      console.log(`Downloaded to ${rl_docs_path}/${file_name}.md`);
    })
  );

  console.log("Rust Library Content Downloaded");
};

main();
